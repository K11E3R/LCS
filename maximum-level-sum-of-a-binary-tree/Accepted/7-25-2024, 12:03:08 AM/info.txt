{"id":1332348105,"question_id":1116,"lang":"python3","lang_name":"Python3","time":"1 day, 23 hours","timestamp":1721858588,"status":10,"status_display":"Accepted","runtime":"151 ms","url":"/submissions/detail/1332348105/","is_pending":"Not Pending","title":"Maximum Level Sum of a Binary Tree","memory":"20.1 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nfrom collections import deque\nclass Solution:\n    def maxLevelSum(self, root: Optional[TreeNode]) -> int:\n        \n        deq=deque([root])\n        if not root:\n            return 0 \n        ma=[float('-inf'),0]\n        i=0\n        while deq:\n            i+=1\n            new_deque=deque([])\n            su=0\n            while deq:\n                node=deq.popleft()\n                su+=node.val\n                if node.left:\n                    new_deque.append(node.left)\n                if node.right:\n                    new_deque.append(node.right)\n            deq=new_deque.copy()\n            if ma[0]<su:\n                ma=[su,i]\n        return ma[1]\n\n            \n\n\n                \n\n\n            \n                \n\n\n            ","compare_result":"11111111111111111111111111111111111111111","title_slug":"maximum-level-sum-of-a-binary-tree","has_notes":false,"flag_type":1}