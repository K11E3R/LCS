{"id":1332352083,"question_id":2553,"lang":"java","lang_name":"Java","time":"1Â day, 23Â hours","timestamp":1721859108,"status":10,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/1332352083/","is_pending":"Not Pending","title":"Total Cost to Hire K Workers","memory":"55.2 MB","code":"import java.util.Arrays;\n\nclass Solution {\n    public long totalCost(int[] costs, int k, int candidates) {\n\n       long cost = 0;\n\n        int startPtr = candidates - 1;\n        int endPtr = costs.length - candidates;\n\n        if (startPtr >= endPtr) {\n            endPtr = startPtr + 1;\n        }\n\n        int[] startCandidates = Arrays.copyOfRange(costs, 0, startPtr + 1);\n        int[] endCandidates = Arrays.copyOfRange(costs, endPtr, costs.length);\n\n\n        int startLimit = startCandidates.length;\n        int endLimit = endCandidates.length;\n\n        buildMinHeap(startCandidates);\n        buildMinHeap(endCandidates);\n    \n        while (k > 0) {\n            int startMin = startCandidates[0];\n            int endMin;\n\n            if (endCandidates.length > 0) {\n                 endMin = endCandidates[0];\n            } else {\n                 endMin = 10000000;\n            }\n\n            if (startLimit == 0) startMin = 10000000;\n            if (endLimit == 0) endMin = 10000000;\n\n            if (startMin <= endMin) {\n                cost = cost + startMin;\n                if (startPtr < endPtr - 1) {\n                    startCandidates[0] = costs[++startPtr];\n                    minHeapify(0, startCandidates, candidates);\n                } else {\n                    swap(startCandidates, 0, startLimit - 1) ;\n                    minHeapify(0, startCandidates, --startLimit);\n                }\n            } else {\n                cost = cost + endMin;\n\n                if(endPtr > startPtr + 1) {\n                    endCandidates[0] = costs[--endPtr];\n                    minHeapify(0, endCandidates, candidates);\n                } else {\n                    swap(endCandidates, 0, endLimit - 1);\n                    minHeapify(0, endCandidates, --endLimit);\n                }\n            }\n\n            k--;\n        }\n\n        return cost;\n    }\n\n    \n    void buildMinHeap(int[] arr) {\n        for (int i = (arr.length - 1) / 2; i >= 0; i--) {\n            minHeapify(i, arr, arr.length);\n        }\n    }\n\n    void minHeapify(int index, int[] arr, int limit) {\n        int left = 2 * index + 1;\n        int right = 2 * index + 2;\n        int max = index;\n\n        if (left < limit && arr[left] < arr[max]) max = left;\n        if (right < limit && arr[right] < arr[max]) max = right;\n\n        if (max == index) return;\n        swap(arr, index, max);\n        minHeapify(max, arr, limit);\n    }\n\n\n    void swap(int[] arr, int i, int j) {\n        int temp = arr[i];\n        arr[i] = arr[j];\n        arr[j] = temp;\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"total-cost-to-hire-k-workers","has_notes":false,"flag_type":1}