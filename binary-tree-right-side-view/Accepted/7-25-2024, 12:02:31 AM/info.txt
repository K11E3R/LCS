{"id":1332347787,"question_id":199,"lang":"racket","lang_name":"Racket","time":"1 day, 23 hours","timestamp":1721858551,"status":10,"status_display":"Accepted","runtime":"172 ms","url":"/submissions/detail/1332347787/","is_pending":"Not Pending","title":"Binary Tree Right Side View","memory":"101.1 MB","code":"; Definition for a binary tree node.\n#|\n\n; val : integer?\n; left : (or/c tree-node? #f)\n; right : (or/c tree-node? #f)\n(struct tree-node\n  (val left right) #:mutable #:transparent)\n\n; constructor\n(define (make-tree-node [val 0])\n  (tree-node val #f #f))\n\n|#\n(define (get-layer level [queue '()])\n  (if (empty? level)\n      queue\n      (match (first level)\n        [(tree-node a #f #f)\n         (get-layer (rest level) queue)]\n        [(tree-node a b #f)\n         (get-layer (rest level) (append queue (list b)))]\n        [(tree-node a #f b)\n         (get-layer (rest level) (append queue (list b)))]\n        [(tree-node a b c)\n         (get-layer (rest level)\n                    (append queue (list b c)))])))\n\n(define (iter-layers initial [results '()])\n  (if (eq? initial '())\n      results\n      (let ([res (get-layer initial)])\n        (if (empty? res)\n            (reverse results)\n            (iter-layers res (cons (tree-node-val (last res)) results))))))\n\n(define (right-side-view root)\n  (if (not (tree-node? root))\n      '()\n      (cons (tree-node-val root)\n        (iter-layers (list root)))))","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-right-side-view","has_notes":false,"flag_type":1}