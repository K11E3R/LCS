{"id":1316900394,"question_id":498,"lang":"python3","lang_name":"Python3","time":"2 weeks, 1 day","timestamp":1720647147,"status":10,"status_display":"Accepted","runtime":"157 ms","url":"/submissions/detail/1316900394/","is_pending":"Not Pending","title":"Diagonal Traverse","memory":"19.9 MB","code":"from typing import List, Dict\n\nclass Solution:\n    def findDiagonalOrder(self, mat: List[List[int]]) -> List[int]:\n        if not mat:\n            return []\n        \n        diagonals: Dict[int, List[int]] = {}\n        rows, cols = len(mat), len(mat[0])\n        \n        # Populate the hashmap with diagonals\n        for r in range(rows):\n            for c in range(cols):\n                if (r + c) not in diagonals:\n                    diagonals[r + c] = []\n                diagonals[r + c].append(mat[r][c])\n        \n        result = []\n        \n        for key in sorted(diagonals.keys()):\n            if key % 2 == 0:\n                result.extend(reversed(diagonals[key]))\n            else:\n                result.extend(diagonals[key])\n        \n        return result","compare_result":"11111111111111111111111111111111","title_slug":"diagonal-traverse","has_notes":false,"flag_type":1}