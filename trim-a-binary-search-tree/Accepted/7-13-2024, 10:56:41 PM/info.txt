{"id":1320083224,"question_id":669,"lang":"rust","lang_name":"Rust","time":"1 week, 6 days","timestamp":1720904201,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1320083224/","is_pending":"Not Pending","title":"Trim a Binary Search Tree","memory":"3.3 MB","code":"// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn trim_bst(root: Option<Rc<RefCell<TreeNode>>>, low: i32, high: i32) -> Option<Rc<RefCell<TreeNode>>> {\n        if let Some(node) = root {\n            let mut node_ref = node.borrow_mut();\n            let val = node_ref.val;\n            \n            if val < low {\n                return Self::trim_bst(node_ref.right.clone(), low, high);\n            } else if val > high {\n                return Self::trim_bst(node_ref.left.clone(), low, high);\n            } else {\n                node_ref.left = Self::trim_bst(node_ref.left.clone(), low, high);\n                node_ref.right = Self::trim_bst(node_ref.right.clone(), low, high);\n                return Some(node.clone());\n            }\n        }\n        \n        None\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"trim-a-binary-search-tree","has_notes":false,"flag_type":1}