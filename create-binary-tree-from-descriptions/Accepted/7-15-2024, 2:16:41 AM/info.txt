{"id":1321261549,"question_id":2306,"lang":"cpp","lang_name":"C++","time":"1 week, 4 days","timestamp":1721002601,"status":10,"status_display":"Accepted","runtime":"489 ms","url":"/submissions/detail/1321261549/","is_pending":"Not Pending","title":"Create Binary Tree From Descriptions","memory":"219 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\n\n#define MX 100001\n#pragma GCC optimize(\"03\")\n#pragma GCC target (\"avx\")\n#pragma GCC target (\"-fsplit-loops\")\nTreeNode* Nodes[MX];\nTreeNode nodes[MX];\nint P[MX];\nint V[MX];\nint cnt = 0;\nint idx = 0;\nTreeNode* p;\nTreeNode* c;\nauto _ = [](){\n    ios_base::sync_with_stdio(false);\n    cin.tie(NULL), cout.tie(NULL);\n    return 0;\n}();\nclass Solution {\npublic:\n    TreeNode* createBinaryTree(const vector<vector<int>>& descriptions) {\n        while(cnt) Nodes[V[--cnt]] = nullptr, P[V[cnt]] = 0;\n        idx = cnt;\n        for(const vector<int> &desc : descriptions){\n            int a = desc[0], b = desc[1];\n            p = Nodes[a] ? Nodes[a] : (Nodes[a] = &(nodes[idx++] = TreeNode(V[cnt++] = a)));\n            c = Nodes[b] ? Nodes[b] : (Nodes[b] = &(nodes[idx++] = TreeNode(V[cnt++] = b)));\n            P[b] = a;\n            if(desc[2]) p -> left = c; else p -> right = c;\n        }\n        for(const vector<int> &desc : descriptions) if(!P[desc[0]]) return Nodes[desc[0]];\n        return NULL;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"create-binary-tree-from-descriptions","has_notes":false,"flag_type":1}