{"id":1321261055,"question_id":2306,"lang":"rust","lang_name":"Rust","time":"1 week, 4 days","timestamp":1721002539,"status":10,"status_display":"Accepted","runtime":"94 ms","url":"/submissions/detail/1321261055/","is_pending":"Not Pending","title":"Create Binary Tree From Descriptions","memory":"4.1 MB","code":"use std::cell::RefCell;\nuse std::collections::{HashMap, HashSet};\nuse std::rc::Rc;\n\nimpl Solution {\n    pub fn create_binary_tree(descriptions: Vec<Vec<i32>>) -> Option<Rc<RefCell<TreeNode>>> {\n        let mut nodes = HashMap::new();\n        let mut children = HashSet::new();\n\n        let mut get_node = |value| {\n            Rc::clone(\n                nodes\n                    .entry(value)\n                    .or_insert_with(|| Rc::new(RefCell::new(TreeNode::new(value)))),\n            )\n        };\n\n        for description in descriptions {\n            let [parent, child, is_left]: [_; 3] = description.try_into().ok().unwrap();\n\n            {\n                let parent_node = get_node(parent);\n                let mut parent_node = parent_node.borrow_mut();\n                let parent_node = &mut *parent_node;\n                let child_node = get_node(child);\n\n                (if is_left == 0 {\n                    &mut parent_node.right\n                } else {\n                    &mut parent_node.left\n                })\n                .replace(child_node);\n            }\n\n            children.insert(child);\n        }\n\n        nodes.into_values().find(|node| !children.contains(&node.borrow().val))\n    }\n}\n","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"create-binary-tree-from-descriptions","has_notes":false,"flag_type":1}