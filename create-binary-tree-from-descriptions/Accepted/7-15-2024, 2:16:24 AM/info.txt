{"id":1321261392,"question_id":2306,"lang":"cpp","lang_name":"C++","time":"1 week, 4 days","timestamp":1721002584,"status":10,"status_display":"Accepted","runtime":"669 ms","url":"/submissions/detail/1321261392/","is_pending":"Not Pending","title":"Create Binary Tree From Descriptions","memory":"276.3 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    TreeNode* createBinaryTree(vector<vector<int>>& descriptions) {\n        unordered_map<int, TreeNode*> m;\n        unordered_set<int> vis;\n        for (auto& d : descriptions) {\n            int p = d[0], c = d[1], left = d[2];\n            if (!m.count(p)) m[p] = new TreeNode(p);\n            if (!m.count(c)) m[c] = new TreeNode(c);\n            if (left)\n                m[p]->left = m[c];\n            else\n                m[p]->right = m[c];\n            vis.insert(c);\n        }\n        for (auto& [v, node] : m) {\n            if (!vis.count(v)) return node;\n        }\n        return nullptr;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"create-binary-tree-from-descriptions","has_notes":false,"flag_type":1}