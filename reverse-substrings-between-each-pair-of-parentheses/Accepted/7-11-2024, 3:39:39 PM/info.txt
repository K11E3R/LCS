{"id":1317609931,"question_id":1298,"lang":"rust","lang_name":"Rust","time":"2 weeks, 1 day","timestamp":1720705179,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1317609931/","is_pending":"Not Pending","title":"Reverse Substrings Between Each Pair of Parentheses","memory":"2.1 MB","code":"impl Solution {\n    pub fn reverse_parentheses(s: String) -> String {\n        let n = s.len();\n        let mut d = vec![0; n];\n        let mut stk = Vec::new();\n        let s_chars: Vec<char> = s.chars().collect();\n\n        for (i, &c) in s_chars.iter().enumerate() {\n            if c == '(' {\n                stk.push(i);\n            } else if c == ')' {\n                let j = stk.pop().unwrap();\n                d[i] = j;\n                d[j] = i;\n            }\n        }\n\n        let mut i = 0;\n        let mut x = 1;\n        let mut ans = Vec::new();\n\n        while i < n {\n            if s_chars[i] == '(' || s_chars[i] == ')' {\n                i = d[i];\n                x = -x;\n            } else {\n                ans.push(s_chars[i]);\n            }\n            i = (i as isize + x) as usize;\n        }\n\n        ans.into_iter().collect()\n    }\n}","compare_result":"11111111111111111111111111111111111111","title_slug":"reverse-substrings-between-each-pair-of-parentheses","has_notes":false,"flag_type":1}