{"id":1332350650,"question_id":399,"lang":"scala","lang_name":"Scala","time":"1 day, 23 hours","timestamp":1721858915,"status":10,"status_display":"Accepted","runtime":"727 ms","url":"/submissions/detail/1332350650/","is_pending":"Not Pending","title":"Evaluate Division","memory":"61.4 MB","code":"object Solution:\n  import collection.mutable\n\n  def calcEquation(equations: List[List[String]], values: Array[Double], queries: List[List[String]]): Array[Double] =\n    val graph = mutable.Map[String, mutable.Map[String, Double]]()\n\n    // build the graph from input\n    for (i <- equations.indices)\n      val equation = equations(i)\n      val dividend = equation(0)\n      val divisor = equation(1)\n      val quotient = values(i)\n\n      if (!graph.contains(dividend))\n        graph.addOne(dividend, mutable.Map())\n      if (!graph.contains(divisor))\n        graph.addOne(divisor, mutable.Map())\n\n      graph(dividend).addOne(divisor, quotient)\n      graph(divisor).addOne(dividend, 1 / quotient)\n    def dfs(curr: String, target: String, accProduct: Double, visited: Set[String]): Double =\n      if (curr == target) accProduct\n      else if (visited.contains(curr)) -1.0\n      else\n        graph(curr)\n          .map((next, weight) => dfs(next, target, accProduct * weight, visited + curr))\n          .find(_ != -1.0)\n          .getOrElse(-1.0)\n\n    val result =\n      for (List(dividend, divisor) <- queries) yield\n        if (!graph.contains(dividend) || !graph.contains(divisor)) -1.0\n        else dfs(dividend, divisor, 1.0, Set.empty)\n\n    result.toArray","compare_result":"1111111111111111111111111111","title_slug":"evaluate-division","has_notes":false,"flag_type":1}