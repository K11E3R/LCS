{"id":1332350397,"question_id":399,"lang":"scala","lang_name":"Scala","time":"1 day, 23 hours","timestamp":1721858881,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1332350397/","is_pending":"Not Pending","title":"Evaluate Division","memory":"N/A","code":"    def calcEquation(eq: List[List[String]], vals: Array[Double], q: List[List[String]]): Array[Double] = \n\n       val m = Map.empty[String,Map[String,Double]]\n\n       val fn = (a:String, b:String,r:Double) => \n          m.getOrElseUpdate(a,Map())(b) = r\n          m.getOrElseUpdate(b,Map())(a) = 1.0/r\n\n       eq.zipWithIndex.foreach: \n         case (List(a,b), i) => fn(a,b,vals(i))\n         case _ =>\n\n       m.foreach: (a,ratios) => \n        ratios.foreach: (b, ab) => \n            m(b).foreach: (c, bc) =>\n              fn(a, c, ab * bc)\n\n       val ans = Array.fill(q.size)(-1.0)\n       q.zipWithIndex.foreach: \n        case (List(a,b), i) => \n          m.contains(a) && m.contains(b) match \n           case true => (m(b).contains(a)) match\n               case true => \n                ans(i) = 1 / m(b)(a)\n               case false => \n                m(b).keys.find(m(a).contains) match\n                  case Some(x) =>\n                    ans(i) = m(a)(x) / m(b)(x)\n                    fn(a,b,ans(i))\n                  case None => \n           case _ =>\n        case _ =>\n\n       ans\n}","compare_result":null,"title_slug":"evaluate-division","has_notes":false,"flag_type":1}