{"id":1332350149,"question_id":399,"lang":"dart","lang_name":"Dart","time":"1 day, 23 hours","timestamp":1721858847,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1332350149/","is_pending":"Not Pending","title":"Evaluate Division","memory":"N/A","code":"import 'dart:collection';\n\nclass Solution {\n  List<double> calcEquation(List<List<String>> equations, List<double> values,\n      List<List<String>> queries) {\n    Map<String, Map<String, double>> graph = buildGraph(equations, values);\n    List<double> results = [];\n\n    for (var query in queries) {\n      var [dividend, divisor] = query;\n\n      if (graph.containsKey(dividend) && graph.containsKey(divisor)) {\n        var result = bfs(dividend, divisor, graph);\n        results.add(result);\n      } else {\n        results.add(-1.0);\n      }\n    }\n    return results;\n  }\n\n  Map<String, Map<String, double>> buildGraph(\n      List<List<String>> equations, List<double> values) {\n    Map<String, Map<String, double>> graph = {};\n\n    for (var (i, equation) in equations.indexed) {\n      var [dividend, divisor] = equation;\n      var value = values[i];\n\n      if (!graph.containsKey(dividend)) {\n        graph[dividend] = {};\n      }\n      graph[dividend]![divisor] = value;\n\n      if (!graph.containsKey(divisor)) {\n        graph[divisor] = {};\n      }\n      graph[divisor]![dividend] = 1.0 / value;\n    }\n\n    return graph;\n  }\n\n  double bfs(String start, String end, Map<String, Map<String, double>> graph) {\n    Queue<(String, double)> queue = Queue();\n    Set<String> visited = {};\n\n    queue.add((start, 1.0));\n    visited.add(start);\n\n    while (queue.isNotEmpty) {\n      var (currentNode, currentValue) = queue.removeFirst();\n\n      if (currentNode == end) {\n        return currentValue;\n      }\n\n      for (var neighbor in graph[currentNode]!.entries) {\n        var neighborNode = neighbor.key;\n        var neighborWeight = neighbor.value;\n\n        if (!visited.contains(neighborNode)) {\n          visited.add(neighborNode);\n          queue.add((neighborNode, currentValue * neighborWeight));\n        }\n      }\n    }\n    return -1.0;\n  }\n}","compare_result":"1111111111111111110000000000","title_slug":"evaluate-division","has_notes":false,"flag_type":1}