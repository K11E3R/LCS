{"id":1316846498,"question_id":937,"lang":"rust","lang_name":"Rust","time":"2 weeks, 2 days","timestamp":1720641752,"status":10,"status_display":"Accepted","runtime":"43 ms","url":"/submissions/detail/1316846498/","is_pending":"Not Pending","title":"Online Stock Span","memory":"6.4 MB","code":"use std::collections::VecDeque;\nstruct StockSpanner {\n    stk: VecDeque<(i32, i32)>,\n}\n\n/**\n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl StockSpanner {\n    fn new() -> Self {\n        Self {\n            stk: vec![(i32::MAX, -1)].into_iter().collect(),\n        }\n    }\n\n    fn next(&mut self, price: i32) -> i32 {\n        let mut cnt = 1;\n        while self.stk.back().unwrap().0 <= price {\n            cnt += self.stk.pop_back().unwrap().1;\n        }\n        self.stk.push_back((price, cnt));\n        cnt\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"online-stock-span","has_notes":false,"flag_type":1}