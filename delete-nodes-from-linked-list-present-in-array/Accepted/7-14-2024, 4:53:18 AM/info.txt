{"id":1320260048,"question_id":3501,"lang":"rust","lang_name":"Rust","time":"1 week, 5 days","timestamp":1720925598,"status":10,"status_display":"Accepted","runtime":"82 ms","url":"/submissions/detail/1320260048/","is_pending":"Not Pending","title":"Delete Nodes From Linked List Present in Array","memory":"10.3 MB","code":"// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\n\nimpl Solution {\n    pub fn modified_list(nums: Vec<i32>, head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n        use std::collections::HashSet;\n        \n        let to_delete: HashSet<i32> = nums.into_iter().collect();\n        let mut dummy = Box::new(ListNode { val: 0, next: head });\n        let mut current = &mut dummy;\n        \n        while let Some(ref mut node) = current.next {\n            if to_delete.contains(&node.val) {\n                current.next = node.next.take();\n            } else {\n                current = current.next.as_mut().unwrap();\n            }\n        }\n        \n        dummy.next\n    }\n}","compare_resulttitle_slug":"delete-nodes-from-linked-list-present-in-array","has_notes":false,"flag_type":1}