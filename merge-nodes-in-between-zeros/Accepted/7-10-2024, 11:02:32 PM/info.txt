{"id":1316884352,"question_id":2299,"lang":"rust","lang_name":"Rust","time":"2 weeks, 2 days","timestamp":1720645352,"status":10,"status_display":"Accepted","runtime":"114 ms","url":"/submissions/detail/1316884352/","is_pending":"Not Pending","title":"Merge Nodes in Between Zeros","memory":"13.9 MB","code":"// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n//\n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn merge_nodes(mut head: Option<Box<ListNode>>) -> Option<Box<ListNode>> {\n        let mut dummy = Box::new(ListNode::new(-1));\n        let mut cur = &mut dummy;\n        let mut sum = 0;\n        while let Some(node) = head {\n            if node.val == 0 && sum != 0 {\n                cur.next = Some(Box::new(ListNode::new(sum)));\n                cur = cur.as_mut().next.as_mut().unwrap();\n                sum = 0;\n            }\n            sum += node.val;\n            head = node.next;\n        }\n        dummy.next.take()\n    }\n}","compare_result":"111111111111111111111111111111111111111","title_slug":"merge-nodes-in-between-zeros","has_notes":false,"flag_type":1}