{"id":1331848548,"question_id":1333,"lang":"rust","lang_name":"Rust","time":"2 days, 8 hours","timestamp":1721827486,"status":10,"status_display":"Accepted","runtime":"57 ms","url":"/submissions/detail/1331848548/","is_pending":"Not Pending","title":"Sort the Jumbled Numbers","memory":"3.3 MB","code":"impl Solution {\n    pub fn sort_jumbled(mapping: Vec<i32>, nums: Vec<i32>) -> Vec<i32> {\n        let f = |x: i32| -> i32 {\n            if x == 0 {\n                return mapping[0];\n            }\n            let mut y = 0;\n            let mut k = 1;\n            let mut num = x;\n            while num != 0 {\n                let v = mapping[(num % 10) as usize];\n                y = k * v + y;\n                k *= 10;\n                num /= 10;\n            }\n            y\n        };\n\n        let n = nums.len();\n        let mut arr: Vec<(i32, usize)> = Vec::with_capacity(n);\n        for i in 0..n {\n            arr.push((f(nums[i]), i));\n        }\n        arr.sort();\n\n        let mut ans: Vec<i32> = Vec::with_capacity(n);\n        for (_, i) in arr {\n            ans.push(nums[i]);\n        }\n        ans\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sort-the-jumbled-numbers","has_notes":false,"flag_type":1}