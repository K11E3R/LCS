{"id":1330455956,"question_id":1741,"lang":"rust","lang_name":"Rust","time":"3 days, 12 hours","timestamp":1721725042,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1330455956/","is_pending":"Not Pending","title":"Sort Array by Increasing Frequency","memory":"2.1 MB","code":"use std::collections::HashMap;\nimpl Solution {\n    pub fn frequency_sort(mut nums: Vec<i32>) -> Vec<i32> {\n        let mut h:HashMap<i32, i32> = HashMap::new();\n        for x in nums.iter() {\n            *h.entry(*x).or_default() += 1;\n        }\n        println!(\"{:?}\", h);\n        nums.sort_by(|a,b| h.get(a).unwrap().cmp(h.get(b).unwrap()).then(b.cmp(a)));\n        nums\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sort-array-by-increasing-frequency","has_notes":false,"flag_type":1}