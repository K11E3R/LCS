{"id":1330454576,"question_id":1741,"lang":"rust","lang_name":"Rust","time":"3 days, 12 hours","timestamp":1721724946,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1330454576/","is_pending":"Not Pending","title":"Sort Array by Increasing Frequency","memory":"2.2 MB","code":"use std::collections::HashMap;\nimpl Solution {\n    pub fn frequency_sort(mut nums: Vec<i32>) -> Vec<i32> {\n        let n = nums.len();\n        let mut map = HashMap::new();\n        for &num in nums.iter() {\n            *map.entry(num).or_insert(0) += 1;\n        }\n        nums.sort_by(|a, b| {\n            if map.get(a) == map.get(b) {\n                return b.cmp(a);\n            }\n            map.get(a).cmp(&map.get(b))\n        });\n        nums\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"sort-array-by-increasing-frequency","has_notes":false,"flag_type":1}