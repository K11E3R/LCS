{"id":1325551635,"question_id":1653,"lang":"python3","lang_name":"Python3","time":"1 week, 1 day","timestamp":1721328883,"status":10,"status_display":"Accepted","runtime":"71 ms","url":"/submissions/detail/1325551635/","is_pending":"Not Pending","title":"Number of Good Leaf Nodes Pairs","memory":"16.9 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def countPairs(self, root: TreeNode, distance: int) -> int:\n        self.res = 0\n\n        def solve(root):\n            if root is None:\n                return {}\n            if root.left is None and root.right is None:\n                # leaf node here\n                return {1: 1}\n            lhNodes = solve(root.left)            \n            rhNodes = solve(root.right)\n            \n            for leftNodeHeight in lhNodes:\n                for rightNodeHeight in rhNodes:\n                    if leftNodeHeight + rightNodeHeight <= distance:\n                        self.res += lhNodes[leftNodeHeight] * rhNodes[rightNodeHeight]\n\n            nhNodes = {}\n            for key in lhNodes:\n                if key <= distance:\n                    nhNodes[key + 1] = lhNodes[key]\n            for key in rhNodes:\n                if key <= distance:\n                    nhNodes[key + 1] = nhNodes.get(key + 1, 0) + rhNodes[key]                    \n\n\n\n            return nhNodes\n\n        solve(root)\n        return self.res","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-good-leaf-nodes-pairs","has_notes":false,"flag_type":1}