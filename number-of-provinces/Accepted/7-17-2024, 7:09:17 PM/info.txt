{"id":1324345365,"question_id":547,"lang":"rust","lang_name":"Rust","time":"1 week, 2 days","timestamp":1721236157,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1324345365/","is_pending":"Not Pending","title":"Number of Provinces","memory":"2.3 MB","code":"impl Solution {\n    pub fn find_circle_num(is_connected: Vec<Vec<i32>>) -> i32 {\n        let n = is_connected.len();\n        let mut is_visited = vec![false; n];\n        let mut i = 0;\n        let mut provinence_count = 0;\n        let mut to_visit = Vec::new();\n\n        while i < n {\n            if is_visited[i] {\n                i += 1;\n                continue;\n            }\n\n            provinence_count += 1;\n            to_visit.push(i);\n            while let Some(j) = to_visit.pop() {\n                if is_visited[j] { continue; }\n                is_visited[j] = true;\n                let connected_it = is_connected[j]\n                    .iter()\n                    .enumerate()\n                    .filter_map(|(k, &is_conn)| (is_conn == 1).then_some(k));\n                for k in connected_it {\n                    to_visit.push(k);\n                }\n            }\n        }\n\n        provinence_count\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-provinces","has_notes":false,"flag_type":1}