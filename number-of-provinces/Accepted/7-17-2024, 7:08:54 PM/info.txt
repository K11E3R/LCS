{"id":1324344909,"question_id":547,"lang":"rust","lang_name":"Rust","time":"1 week, 2 days","timestamp":1721236134,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1324344909/","is_pending":"Not Pending","title":"Number of Provinces","memory":"2.4 MB","code":"impl Solution {\n    pub fn find_circle_num(is_connected: Vec<Vec<i32>>) -> i32 {\n        fn dfs(is_connected: &Vec<Vec<i32>>, visited: &mut Vec<bool>, i: usize) {\n            for j in 0..is_connected.len() {\n                if is_connected[i][j] == 1 && !visited[j] {\n                    visited[j] = true;\n                    dfs(is_connected, visited, j);\n                }\n            }\n        }\n\n        let n = is_connected.len();\n        let mut visited = vec![false; n];\n        let mut count = 0;\n\n        for i in 0..n {\n            if !visited[i] {\n                dfs(&is_connected, &mut visited, i);\n                count += 1;\n            }\n        }\n\n        count\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"number-of-provinces","has_notes":false,"flag_type":1}