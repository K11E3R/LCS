{"id":1320267535,"question_id":3494,"lang":"python3","lang_name":"Python3","time":"1 week, 5 days","timestamp":1720925829,"status":10,"status_display":"Accepted","runtime":"42 ms","url":"/submissions/detail/1320267535/","is_pending":"Not Pending","title":"Minimum Cost for Cutting Cake I","memory":"16.7 MB","code":"class Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:\n        horizontalCut.sort(reverse=True)\n        verticalCut.sort(reverse=True)\n        \n        h_index, v_index = 0, 0\n        h_pieces, v_pieces = 1, 1\n        total_cost = 0\n        \n        while h_index < len(horizontalCut) and v_index < len(verticalCut):\n            if horizontalCut[h_index] >= verticalCut[v_index]:\n                total_cost += horizontalCut[h_index] * v_pieces\n                h_index += 1\n                h_pieces += 1\n            else:\n                total_cost += verticalCut[v_index] * h_pieces\n                v_index += 1\n                v_pieces += 1\n        \n        while h_index < len(horizontalCut):\n            total_cost += horizontalCut[h_index] * v_pieces\n            h_index += 1\n        \n        while v_index < len(verticalCut):\n            total_cost += verticalCut[v_index] * h_pieces\n            v_index += 1\n        \n        return total_cost","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"minimum-cost-for-cutting-cake-i","has_notes":false,"flag_type":1}