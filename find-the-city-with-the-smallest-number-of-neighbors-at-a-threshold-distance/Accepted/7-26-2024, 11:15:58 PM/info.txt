{"id":1334526463,"question_id":1456,"lang":"cpp","lang_name":"C++","time":"14Â minutes","timestamp":1722028558,"status":10,"status_display":"Accepted","runtime":"159 ms","url":"/submissions/detail/1334526463/","is_pending":"Not Pending","title":"Find the City With the Smallest Number of Neighbors at a Threshold Distance","memory":"33.8 MB","code":"class Solution {\npublic:\n    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {\n        vector<vector<pair<int, int>>> graph(n); \n        for (const auto& edge : edges) {\n            int node1 = edge[0], node2 = edge[1], distance = edge[2];\n            graph[node1].emplace_back(node2, distance);\n            graph[node2].emplace_back(node1, distance);\n        }\n\n        auto get_number_of_neighbors_in_distance = [&](int source) -> int {\n            priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> queue;\n            queue.emplace(0, source); // distance to node itself is 0\n            set<int> visited;\n\n            while (!queue.empty()) {\n                auto [distance_to_this_node, cur_node] = queue.top();\n                queue.pop();\n                if (!visited.count(cur_node)) {\n                    visited.insert(cur_node);\n                    for (const auto& [neighbor, distance] : graph[cur_node]) {\n                        int distance_from_source = distance_to_this_node + distance;\n                        if (distance_from_source <= distanceThreshold) { // ensure that we're allowed to go to this node\n                            queue.emplace(distance_from_source, neighbor);\n                        }\n                    }\n                }\n            }\n            return visited.size() - 1;\n        };\n\n        int minimum_number = n;\n        int res = -1;\n\n        for (int source = 0; source < n; ++source) {\n            int neighbors = get_number_of_neighbors_in_distance(source);\n            // we iterate source from smaller to bigger this ensures that we choose node with greater value if they have equal number of neighbors\n            if (neighbors <= minimum_number) {\n                minimum_number = neighbors;\n                res = source;\n            }\n        }\n\n        return res;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance","has_notes":false,"flag_type":1}