{"id":1316913962,"question_id":98,"lang":"rust","lang_name":"Rust","time":"2 weeks, 1 day","timestamp":1720648762,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1316913962/","is_pending":"Not Pending","title":"Validate Binary Search Tree","memory":"3 MB","code":"use std::rc::Rc;\nuse std::cell::RefCell;\n\n// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//     pub val: i32,\n//     pub left: Option<Rc<RefCell<TreeNode>>>,\n//     pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n\n// impl TreeNode {\n//     #[inline]\n//     pub fn new(val: i32) -> Self {\n//         TreeNode {\n//             val,\n//             left: None,\n//             right: None,\n//         }\n//     }\n// }\n\n\nimpl Solution {\n    pub fn is_valid_bst(root: Option<Rc<RefCell<TreeNode>>>) -> bool {\n        fn inorder(node: &Option<Rc<RefCell<TreeNode>>>, values: &mut Vec<i32>) {\n            if let Some(n) = node {\n                inorder(&n.borrow().left, values);\n                values.push(n.borrow().val);\n                inorder(&n.borrow().right, values);\n            }\n        }\n        \n        let mut values = Vec::new();\n        inorder(&root, &mut values);\n        \n        for i in 1..values.len() {\n            if values[i] <= values[i - 1] {\n                return false;\n            }\n        }\n        \n        true\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"validate-binary-search-tree","has_notes":false,"flag_type":1}