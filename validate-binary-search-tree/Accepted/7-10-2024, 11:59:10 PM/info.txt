{"id":1316913861,"question_id":98,"lang":"rust","lang_name":"Rust","time":"2 weeks, 1 day","timestamp":1720648750,"status":10,"status_display":"Accepted","runtime":"2 ms","url":"/submissions/detail/1316913861/","is_pending":"Not Pending","title":"Validate Binary Search Tree","memory":"2.9 MB","code":"// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nuse std::collections::VecDeque;\nimpl Solution {\npub fn is_valid_bst(root: Option<Rc<RefCell<TreeNode>>>) -> bool {\n    let Some(root) = root else {\n        return true;\n    };\n    let mut queue: VecDeque<(Rc<RefCell<TreeNode>>, Option<i32>, Option<i32>)> = VecDeque::new();\n\n    queue.push_back((Rc::clone(&root), None, None));\n\n    while let Some((current_node_rc, lower_bound, upper_bound)) = queue.pop_front() {\n        let current_node = current_node_rc.borrow();\n\n        if let Some(lower) = lower_bound {\n            if current_node.val <= lower {\n                return false;\n            }\n        }\n        if let Some(upper) = upper_bound {\n            if current_node.val >= upper {\n                return false;\n            }\n        }\n\n        if let Some(left_rc) = &current_node.left {\n            queue.push_back((Rc::clone(left_rc), lower_bound, Some(current_node.val)));\n        }\n        if let Some(right_rc) = &current_node.right {\n            queue.push_back((Rc::clone(right_rc), Some(current_node.val), upper_bound));\n        }\n    }\n    true\n}\n}","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"validate-binary-search-tree","has_notes":false,"flag_type":1}