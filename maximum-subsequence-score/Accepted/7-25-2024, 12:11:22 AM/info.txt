{"id":1332351920,"question_id":2636,"lang":"java","lang_name":"Java","time":"1 day, 23 hours","timestamp":1721859082,"status":10,"status_display":"Accepted","runtime":"65 ms","url":"/submissions/detail/1332351920/","is_pending":"Not Pending","title":"Maximum Subsequence Score","memory":"63.3 MB","code":"class Solution {\n    public long maxScore(int[] nums1, int[] nums2, int k) {\n\n        long ans = 0;\n        int N = nums1.length;\n\n        if (k == 1) {\n            for (int i = 0; i < N; i++) {\n                long cur = (long) nums1[i] * nums2[i];\n                ans = Math.max(ans, cur);\n            }\n            return ans;\n        }\n\n        int[][] arr = new int[N][];\n        for (int i = 0; i < N; i++) {\n            arr[i] = new int[]{nums1[i], nums2[i]};\n        }\n        Arrays.sort(arr, (a, b) -> a[1] - b[1]);\n        Queue<Integer> queue = new PriorityQueue<>();\n        long sum = 0;\n        for (int i = N - 1; i >= 0; i--) {\n            int num1 = arr[i][0];\n            if (i <= N - k) {\n                long cur = (sum + num1) * arr[i][1];\n                ans = Math.max(ans, cur);\n            }\n            if (queue.size() < k - 1) {\n                queue.add(num1);\n                sum += num1;\n            } else if (num1 > queue.peek()) {\n                sum -= queue.poll();\n                sum += num1;\n                queue.add(num1);\n            }\n        }\n        return ans;\n    }\n}","compare_result":"1111111111111111111111111111","title_slug":"maximum-subsequence-score","has_notes":false,"flag_type":1}