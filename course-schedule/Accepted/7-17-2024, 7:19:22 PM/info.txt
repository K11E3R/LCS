{"id":1324357050,"question_id":207,"lang":"rust","lang_name":"Rust","time":"1 week, 2 days","timestamp":1721236762,"status":10,"status_display":"Accepted","runtime":"6 ms","url":"/submissions/detail/1324357050/","is_pending":"Not Pending","title":"Course Schedule","memory":"2.3 MB","code":"impl Solution {\n    pub fn can_finish(num_courses: i32, prerequisites: Vec<Vec<i32>>) -> bool {\n        // do a topological sort\n\n        let mut indegree = vec![0; num_courses as usize];\n        for rule in prerequisites.iter() {\n            indegree[rule[1] as usize] += 1;\n        }\n        \n        let mut ready: Vec<_> = indegree\n            .iter()\n            .enumerate()\n            .flat_map(|(i, &indeg)| if indeg == 0 { Some(i) } else { None })\n            .collect();\n        let mut seen = 0;\n        \n        while let Some(r) = ready.pop() {\n            seen += 1;\n            for rule in prerequisites.iter() {\n                if rule[0] as usize != r { continue; }\n                indegree[rule[1] as usize] -= 1;\n                if indegree[rule[1] as usize] == 0 { ready.push(rule[1] as usize); }\n            }\n        }\n\n        seen == num_courses\n    }\n}","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"course-schedule","has_notes":false,"flag_type":1}