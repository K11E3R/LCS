{"id":1324357290,"question_id":207,"lang":"rust","lang_name":"Rust","time":"1 week, 2 days","timestamp":1721236775,"status":10,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/1324357290/","is_pending":"Not Pending","title":"Course Schedule","memory":"2.5 MB","code":"impl Solution {\n    pub fn can_finish(num_courses: i32, prerequisites: Vec<Vec<i32>>) -> bool {\n        let num_courses = num_courses as usize;\n        let mut in_degree = vec![0; num_courses];\n        let mut graph = vec![vec![]; num_courses];\n\n        for pair in prerequisites {\n            let course = pair[0] as usize;\n            let prereq = pair[1] as usize;\n            graph[prereq].push(course);\n            in_degree[course] += 1;\n        }\n\n        let mut queue = std::collections::VecDeque::new();\n        for i in 0..num_courses {\n            if in_degree[i] == 0 {\n                queue.push_back(i);\n            }\n        }\n\n        let mut count = 0;\n        while let Some(node) = queue.pop_front() {\n            count += 1;\n            for &neighbor in &graph[node] {\n                in_degree[neighbor] -= 1;\n                if in_degree[neighbor] == 0 {\n                    queue.push_back(neighbor);\n                }\n            }\n        }\n\n        count == num_courses\n    }\n}\n","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"course-schedule","has_notes":false,"flag_type":1}