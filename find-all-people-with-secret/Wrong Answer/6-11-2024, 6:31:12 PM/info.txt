{"id":1285089241,"question_id":2213,"lang":"javascript","lang_name":"JavaScript","time":"1 month, 2 weeks","timestamp":1718123472,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1285089241/","is_pending":"Not Pending","title":"Find All People With Secret","memory":"N/A","code":"const findAllPeople = (n, meetings, firstPerson) => {\n    const parent = Array.from({ length: n }, (_, i) => i);\n    const rank = Array(n).fill(0);\n\n    const find = x => (parent[x] === x ? x : (parent[x] = find(parent[x])));\n    const union = (x, y) => {\n        const rootX = find(x), rootY = find(y);\n        if (rootX !== rootY) {\n            if (rank[rootX] > rank[rootY]) parent[rootY] = rootX;\n            else if (rank[rootX] < rank[rootY]) parent[rootX] = rootY;\n            else { parent[rootY] = rootX; rank[rootX] += 1; }\n        }\n    };\n\n    union(0, firstPerson);\n    meetings.sort((a, b) => a[2] - b[2]);\n\n    for (let i = 0; i < meetings.length; ) {\n        let currentTime = meetings[i][2], group = [];\n        while (i < meetings.length && meetings[i][2] === currentTime) group.push(meetings[i++]);\n\n        const initialParents = new Map();\n        group.forEach(([a, b]) => {\n            initialParents.set(a, find(a));\n            initialParents.set(b, find(b));\n            union(a, b);\n        });\n\n        const knowsSecret = new Set([...initialParents.keys()].filter(p => find(p) === find(0)));\n\n        initialParents.forEach((parent, p) => parent[p] = parent);\n        group.forEach(([a, b]) => (knowsSecret.has(a) || knowsSecret.has(b)) && union(a, b));\n    }\n\n    return Array.from({ length: n }, (_, i) => i).filter(i => find(i) === find(0));\n};\n","compare_result":"10111111100000000010000001000011111011110111111110111011","title_slug":"find-all-people-with-secret","has_notes":false,"flag_type":1}