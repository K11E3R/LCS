{"id":1285295588,"question_id":2213,"lang":"javascript","lang_name":"JavaScript","time":"1 month, 2 weeks","timestamp":1718137499,"status":10,"status_display":"Accepted","runtime":"508 ms","url":"/submissions/detail/1285295588/","is_pending":"Not Pending","title":"Find All People With Secret","memory":"97.8 MB","code":"const groupMeetingsByIndex = (sortedM) => {\n    const groupedByIndex = {};\n    sortedM.forEach((meeting) => {\n        const time = meeting[2];\n        if (!groupedByIndex[time]) {\n            groupedByIndex[time] = [];\n        }\n        groupedByIndex[time].push(meeting);\n    });\n    return groupedByIndex;\n};\n\nconst findAllPeople = (n, meetings, firstPerson) => {\n    const parent = Array.from({ length: n }, (_, i) => i);\n    const rank = Array(n).fill(0);\n\n    const find = (x) => {\n        if (parent[x] !== x) {\n            parent[x] = find(parent[x]);\n        }\n        return parent[x];\n    };\n\n    const union = (x, y) => {\n        const rootX = find(x);\n        const rootY = find(y);\n        if (rootX !== rootY) {\n            if (rank[rootX] > rank[rootY]) {\n                parent[rootY] = rootX;\n            } else if (rank[rootX] < rank[rootY]) {\n                parent[rootX] = rootY;\n            } else {\n                parent[rootY] = rootX;\n                rank[rootX] += 1;\n            }\n        }\n    };\n\n    union(0, firstPerson);\n    meetings.sort((a, b) => a[2] - b[2]);\n\n    const groupedByTime = groupMeetingsByIndex(meetings);\n\n    for (const time in groupedByTime) {\n        const currentMeetings = groupedByTime[time];\n        const tempUnionFind = new Map();\n        const participants = new Set();\n\n        currentMeetings.forEach(([a, b]) => {\n            tempUnionFind.set(a, find(a));\n            tempUnionFind.set(b, find(b));\n            participants.add(a);\n            participants.add(b);\n        });\n\n        currentMeetings.forEach(([a, b]) => union(a, b));\n\n        const knowsSecret = new Set();\n        participants.forEach(p => {\n            if (find(p) === find(0)) {\n                knowsSecret.add(p);\n            }\n        });\n\n        tempUnionFind.forEach((initialRoot, p) => {\n            parent[p] = initialRoot;\n        });\n\n        currentMeetings.forEach(([a, b]) => {\n            if (knowsSecret.has(a) || knowsSecret.has(b)) {\n                union(a, b);\n            }\n        });\n    }\n\n    const result = [];\n    for (let i = 0; i < n; i++) {\n        if (find(i) === find(0)) {\n            result.push(i);\n        }\n    }\n\n    return result.sort((a, b) => a - b);\n};","compare_result":"11111111111111111111111111111111111111111111111111111111","title_slug":"find-all-people-with-secret","has_notes":false,"flag_type":1}