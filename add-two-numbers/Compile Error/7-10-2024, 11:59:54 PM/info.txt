{"id":1316914236,"question_id":2,"lang":"rust","lang_name":"Rust","time":"2 weeks, 1 day","timestamp":1720648794,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1316914236/","is_pending":"Not Pending","title":"Add Two Numbers","memory":"N/A","code":"// Definition for singly-linked list.\n// #[derive(PartialEq, Eq, Clone, Debug)]\n// pub struct ListNode {\n//   pub val: i32,\n//   pub next: Option<Box<ListNode>>\n// }\n// \n// impl ListNode {\n//   #[inline]\n//   fn new(val: i32) -> Self {\n//     ListNode {\n//       next: None,\n//       val\n//     }\n//   }\n// }\nimpl Solution {\n    pub fn add_two_numbers(\n        l1: Option<Box<ListNode>>,\n        l2: Option<Box<ListNode>>,\n    ) -> Option<Box<ListNode>> {\n        let mut dummy_head = ListNode::new(0);\n        let (mut p, mut q, mut current) = (&l1, &l2, &mut dummy_head);\n        let mut carry = 0;\n\n        while p.is_some() || q.is_some() {\n            let sum = carry\n                + p.map_or(0, |node| {\n                    let val = node.val;\n                    p = &node.next;\n                    val\n                })\n                + q.map_or(0, |node| {\n                    let val = node.val;\n                    q = &node.next;\n                    val\n                });\n\n            carry = sum / 10;\n            current.next = Some(Box::new(ListNode::new(sum % 10)));\n            current = current.next.as_mut().unwrap();\n        }\n\n        if carry > 0 {\n            current.next = Some(Box::new(ListNode::new(carry)));\n        }\n\n        dummy_head.next\n    }\n}","compare_result":null,"title_slug":"add-two-numbers","has_notes":false,"flag_type":1}