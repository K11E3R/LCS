{"id":1332351139,"question_id":1036,"lang":"python3","lang_name":"Python3","time":"1 day, 23 hours","timestamp":1721858982,"status":10,"status_display":"Accepted","runtime":"55 ms","url":"/submissions/detail/1332351139/","is_pending":"Not Pending","title":"Rotting Oranges","memory":"16.5 MB","code":"from collections import deque\n\nclass Solution:\n    def orangesRotting(self, grid: List[List[int]]) -> int:\n        if not grid:\n            return -1\n        \n        m, n = len(grid), len(grid[0])\n        queue = deque()\n        fresh_oranges = 0\n        \n        for i in range(m):\n            for j in range(n):\n                if grid[i][j] == 2:\n                    queue.append((i, j, 0))  \n                elif grid[i][j] == 1:\n                    fresh_oranges += 1\n        \n        directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n        max_time = 0\n        \n        while queue:\n            x, y, time = queue.popleft()\n            for dx, dy in directions:\n                nx, ny = x + dx, y + dy\n                if 0 <= nx < m and 0 <= ny < n and grid[nx][ny] == 1:\n                    grid[nx][ny] = 2\n                    fresh_oranges -= 1\n                    queue.append((nx, ny, time + 1))\n                    max_time = max(max_time, time + 1)\n        \n        if fresh_oranges > 0:\n            return -1\n        \n        return max_time","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"rotting-oranges","has_notes":false,"flag_type":1}