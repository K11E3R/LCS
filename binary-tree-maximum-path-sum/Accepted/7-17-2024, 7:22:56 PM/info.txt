{"id":1324361157,"question_id":124,"lang":"rust","lang_name":"Rust","time":"1 week, 2 days","timestamp":1721236976,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1324361157/","is_pending":"Not Pending","title":"Binary Tree Maximum Path Sum","memory":"4.3 MB","code":"use std::rc::Rc;\nuse std::cell::RefCell;\n\nimpl Solution {\n    pub fn max_path_sum(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\n        let mut max_sum = i32::MIN;\n        Self::max_path_sum_recursive(&root, &mut max_sum);\n        max_sum\n    }\n    \n    fn max_path_sum_recursive(root: &Option<Rc<RefCell<TreeNode>>>, max_sum: &mut i32) -> i32 {\n        if let Some(node) = root {\n            let node = node.borrow();\n            let left_sum = Self::max_path_sum_recursive(&node.left, max_sum).max(0);\n            let right_sum = Self::max_path_sum_recursive(&node.right, max_sum).max(0);\n            \n            let current_path_sum = node.val + left_sum + right_sum;\n            *max_sum = (*max_sum).max(current_path_sum);\n            \n            node.val + left_sum.max(right_sum)\n        } else {\n            0\n        }\n    }\n}\n","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"binary-tree-maximum-path-sum","has_notes":false,"flag_type":1}