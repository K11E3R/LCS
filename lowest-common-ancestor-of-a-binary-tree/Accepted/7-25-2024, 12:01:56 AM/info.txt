{"id":1332347544,"question_id":236,"lang":"rust","lang_name":"Rust","time":"1 day, 23 hours","timestamp":1721858516,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1332347544/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Tree","memory":"4.5 MB","code":"// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn lowest_common_ancestor(root: Option<Rc<RefCell<TreeNode>>>, p: Option<Rc<RefCell<TreeNode>>>, q: Option<Rc<RefCell<TreeNode>>>) -> Option<Rc<RefCell<TreeNode>>> {\n        // let mut root = root;\n        if let Some(node) = root.clone() {\n            let node = node.borrow();\n            if let (Some(p1), Some(q1)) = (p.clone(), q.clone()) {\n                if node.val == p1.borrow().val || node.val == q1.borrow().val {\n                    return root;\n                }\n            }\n            \n            let left = Self::lowest_common_ancestor(node.left.clone(), p.clone(), q.clone());\n            let right = Self::lowest_common_ancestor(node.right.clone(), p.clone(), q.clone());\n\n            if left.is_some() && right.is_some() {\n                return root;\n            }\n\n            if left.is_some() {\n                return left;\n            }\n            if right.is_some() {\n                return right;\n            }\n        }\n        None\n    }\n}","compare_result":"11111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-tree","has_notes":false,"flag_type":1}