{"id":1324310839,"question_id":1207,"lang":"python3","lang_name":"Python3","time":"1 week, 2 days","timestamp":1721234326,"status":10,"status_display":"Accepted","runtime":"43 ms","url":"/submissions/detail/1324310839/","is_pending":"Not Pending","title":"Delete Nodes And Return Forest","memory":"17.9 MB","code":"# Definition for a binary tree node.\n# class TreeNode:\n#     def __init__(self, val=0, left=None, right=None):\n#         self.val = val\n#         self.left = left\n#         self.right = right\nclass Solution:\n    def helper(self, node, parent):\n        if node is None:\n            return\n        node.parent = parent\n        if node.val in self.toDel:\n            self.nodes.pop(node.val)\n            if parent:\n                if parent.left and parent.left.val == node.val:\n                    parent.left = None\n                if parent.right and parent.right.val == node.val:\n                    parent.right = None\n            self.helper(node.left, None)\n            self.helper(node.right, None)\n            return\n        self.helper(node.left, node)\n        self.helper(node.right, node)\n\n    \n    def traverse(self, node, parent):\n        if node is None:\n            return\n        self.nodes[node.val] = node\n        node.parent = parent\n        self.traverse(node.left, node)\n        self.traverse(node.right, node)\n\n    def delNodes(self, root: Optional[TreeNode], to_delete: List[int]) -> List[TreeNode]:\n        self.toDel = set(to_delete)\n        self.nodes = {}\n        self.traverse(root, None)\n        self.helper(root, None)\n        return [node for node in self.nodes.values() if not node.parent]","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"delete-nodes-and-return-forest","has_notes":false,"flag_type":1}