{"id":1316918481,"question_id":238,"lang":"rust","lang_name":"Rust","time":"2 weeks, 1 day","timestamp":1720649355,"status":10,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/1316918481/","is_pending":"Not Pending","title":"Product of Array Except Self","memory":"3 MB","code":"\nimpl Solution {\n    pub fn product_except_self(mut nums: Vec<i32>) -> Vec<i32> {\n        let zeroes = nums.iter().filter(|&&v| v == 0).count();\n        let product: i32 = nums.iter().filter(|&&v| v != 0).product();\n\n        if zeroes == 1 {\n            for i in 0..nums.len() {\n                if nums[i] == 0 {\n                    nums[i] = product;\n                } else {\n                    nums[i] = 0;\n                }\n            }\n            // Wiiiiii\n        } else if zeroes > 1 {\n            for i in 0..nums.len() {\n                nums[i] = 0;\n            }\n        } else if zeroes == 0 {\n            for i in 0..nums.len() {\n                if nums[i] != 0 {\n                    nums[i] = product / nums[i];\n                }\n            }\n        }\n\n        nums\n    }\n}","compare_result":"111111111111111111111111","title_slug":"product-of-array-except-self","has_notes":false,"flag_type":1}