{"id":1326754409,"question_id":1710,"lang":"python3","lang_name":"Python3","time":"6 days, 21 hours","timestamp":1721435175,"status":10,"status_display":"Accepted","runtime":"1208 ms","url":"/submissions/detail/1326754409/","is_pending":"Not Pending","title":"Find Servers That Handled Most Number of Requests","memory":"37.8 MB","code":"from sortedcontainers import SortedList\n\n\nclass Solution:\n    def busiestServers(self, k: int, arrival: List[int], load: List[int]) -> List[int]:\n        free = SortedList(range(k))\n        busy = []\n        cnt = [0] * k\n        for i, (start, t) in enumerate(zip(arrival, load)):\n            while busy and busy[0][0] <= start:\n                free.add(busy[0][1])\n                heappop(busy)\n            if not free:\n                continue\n            j = free.bisect_left(i % k)\n            if j == len(free):\n                j = 0\n            server = free[j]\n            cnt[server] += 1\n            heappush(busy, (start + t, server))\n            free.remove(server)\n\n        mx = max(cnt)\n        return [i for i, v in enumerate(cnt) if v == mx]","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-servers-that-handled-most-number-of-requests","has_notes":false,"flag_type":1}