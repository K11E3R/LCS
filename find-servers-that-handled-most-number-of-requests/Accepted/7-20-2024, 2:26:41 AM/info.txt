{"id":1326754560,"question_id":1710,"lang":"python3","lang_name":"Python3","time":"6 days, 21 hours","timestamp":1721435201,"status":10,"status_display":"Accepted","runtime":"810 ms","url":"/submissions/detail/1326754560/","is_pending":"Not Pending","title":"Find Servers That Handled Most Number of Requests","memory":"37.3 MB","code":"class Solution:\n    def busiestServers(self, k: int, arrival: List[int], load: List[int]) -> List[int]:\n        servers = [0] * k\n        busy = []\n        free = []\n        i = 0\n\n        if not arrival or not load or not k:\n            return []\n\n        while i < k and i < len(load):\n            heapq.heappush(busy, (arrival[i] + load[i], i % k))\n            servers[i % k] += 1 \n            i += 1\n\n        while i < len(load):\n            while busy and busy[0][0] <= arrival[i]:\n                _, server_id = heapq.heappop(busy)\n                #print (i + (server_id - i) % k)\n                heapq.heappush(free, i + (server_id - i) % k)\n            \n            if free:\n                busy_id = heapq.heappop(free) % k\n                heapq.heappush(busy, (arrival[i] + load[i], busy_id))\n                servers[busy_id] += 1\n            i += 1\n\n        max_job = max(servers) \n        return [i for i, n in enumerate(servers) if n == max_job]","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-servers-that-handled-most-number-of-requests","has_notes":false,"flag_type":1}