{"id":1316830413,"question_id":2854,"lang":"cpp","lang_name":"C++","time":"2 weeks, 2 days","timestamp":1720640468,"status":14,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/1316830413/","is_pending":"Not Pending","title":"Decremental String Concatenation","memory":"N/A","code":"class Solution {\npublic:\n    int minimizeConcatenatedLength(vector<string>& words) {\n        int n = words.size();\n        int f[n][26][26];\n        memset(f, 0, sizeof(f));\n        function<int(int, int, int)> dfs = [&](int i, int a, int b) {\n            if (i >= n) {\n                return 0;\n            }\n            if (f[i][a][b]) {\n                return f[i][a][b];\n            }\n            auto s = words[i];\n            int m = s.size();\n            int x = dfs(i + 1, a, s[m - 1] - 'a') - (s[0] - 'a' == b);\n            int y = dfs(i + 1, s[0] - 'a', b) - (s[m - 1] - 'a' == a);\n            return f[i][a][b] = m + min(x, y);\n        };\n        return words[0].size() + dfs(1, words[0].front() - 'a', words[0].back() - 'a');\n    }\n};","compare_resulttitle_slug":"decremental-string-concatenation","has_notes":false,"flag_type":1}