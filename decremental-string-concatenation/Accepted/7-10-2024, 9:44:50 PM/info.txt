{"id":1316833327,"question_id":2854,"lang":"python3","lang_name":"Python3","time":"2 weeks, 2 days","timestamp":1720640690,"status":10,"status_display":"Accepted","runtime":"1644 ms","url":"/submissions/detail/1316833327/","is_pending":"Not Pending","title":"Decremental String Concatenation","memory":"17.1 MB","code":"from typing import List\n\nclass Solution:\n    def minimizeConcatenatedLength(self, words: List[str]) -> int:\n        n = len(words)\n        dp = [[float('inf')] * 26 for _ in range(26)]\n        dp[ord(words[0][0]) - ord('a')][ord(words[0][-1]) - ord('a')] = len(words[0])\n        \n        for i in range(1, n):\n            s = words[i]\n            a, b = ord(s[0]) - ord('a'), ord(s[-1]) - ord('a')\n            new_dp = [[float('inf')] * 26 for _ in range(26)]\n            \n            for x in range(26):\n                for y in range(26):\n                    if dp[x][y] < float('inf'):\n                        new_dp[x][b] = min(new_dp[x][b], dp[x][y] + len(s) - (y == a))\n                        new_dp[a][y] = min(new_dp[a][y], dp[x][y] + len(s) - (x == b))\n            \n            dp = new_dp\n        \n        return min(min(row) for row in dp)","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"decremental-string-concatenation","has_notes":false,"flag_type":1}