{"id":1316834746,"question_id":2854,"lang":"rust","lang_name":"Rust","time":"2 weeks, 2 days","timestamp":1720640802,"status":10,"status_display":"Accepted","runtime":"56 ms","url":"/submissions/detail/1316834746/","is_pending":"Not Pending","title":"Decremental String Concatenation","memory":"5.4 MB","code":"use std::collections::HashMap;\n\nimpl Solution {\n    pub fn minimize_concatenated_length(words: Vec<String>) -> i32 {\n        let mut memo: HashMap<(usize, char, char), i32> = HashMap::new();\n        let n = words.len();\n        \n        fn dfs(i: usize, a: char, b: char, words: &Vec<String>, memo: &mut HashMap<(usize, char, char), i32>) -> i32 {\n            if i >= words.len() {\n                return 0;\n            }\n            if let Some(&result) = memo.get(&(i, a, b)) {\n                return result;\n            }\n            let s = &words[i];\n            let x = dfs(i + 1, a, s.chars().last().unwrap(), words, memo) - if s.chars().next().unwrap() == b { 1 } else { 0 };\n            let y = dfs(i + 1, s.chars().next().unwrap(), b, words, memo) - if s.chars().last().unwrap() == a { 1 } else { 0 };\n            let result = s.len() as i32 + x.min(y);\n            memo.insert((i, a, b), result);\n            result\n        }\n        \n        let first_word = &words[0];\n        let initial_result = first_word.len() as i32 + dfs(1, first_word.chars().next().unwrap(), first_word.chars().last().unwrap(), &words, &mut memo);\n        \n        initial_result\n    }\n}\n","compare_resulttitle_slug":"decremental-string-concatenation","has_notes":false,"flag_type":1}