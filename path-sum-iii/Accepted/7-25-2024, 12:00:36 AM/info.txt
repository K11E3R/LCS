{"id":1332346913,"question_id":437,"lang":"rust","lang_name":"Rust","time":"1 day, 23 hours","timestamp":1721858436,"status":10,"status_display":"Accepted","runtime":"3 ms","url":"/submissions/detail/1332346913/","is_pending":"Not Pending","title":"Path Sum III","memory":"2.3 MB","code":"// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\ntype Tree = Rc<RefCell<TreeNode>>;\nimpl Solution {\n    pub fn path_sum(root: Option<Tree>, target_sum: i32) -> i32 {\n        fn recurse(root: Option<&Tree>, vec: &mut Vec<i64>, target: i64) -> i64 {\n            if let Some(node) = root {\n                let val = node.borrow().val as i64;\n                vec.iter_mut().for_each(|x| *x += val); vec.push(val);\n                let max = vec.iter().filter(|&x| x == &target).count() as i64 \n                        + recurse(node.borrow().left.as_ref(), vec, target)\n                        + recurse(node.borrow().right.as_ref(), vec, target);\n                vec.pop(); vec.iter_mut().for_each(|x| *x -= val);\n                max\n            } else { 0 }\n        } \n        recurse(root.as_ref(), &mut vec![], target_sum as i64) as i32\n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"path-sum-iii","has_notes":false,"flag_type":1}