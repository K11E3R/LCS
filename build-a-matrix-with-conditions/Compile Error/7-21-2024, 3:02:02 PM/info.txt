{"id":1328453320,"question_id":2472,"lang":"rust","lang_name":"Rust","time":"5 days, 8 hours","timestamp":1721566922,"status":20,"status_display":"Compile Error","runtime":"N/A","url":"/submissions/detail/1328453320/","is_pending":"Not Pending","title":"Build a Matrix With Conditions","memory":"N/A","code":"\nimpl Solution {\n    pub fn build_matrix(k: i32, row_conditions: Vec<Vec<i32>>, col_conditions: Vec<Vec<i32>>) -> Vec<Vec<i32>> {\n        fn topological_sort(k: i32, conditions: Vec<Vec<i32>>) -> Option<Vec<i32>> {\n            let mut graph: HashMap<i32, Vec<i32>> = HashMap::new();\n            let mut indegree = vec![0; (k + 1) as usize];\n            \n            for condition in conditions {\n                let a = condition[0];\n                let b = condition[1];\n                graph.entry(a).or_insert(vec![]).push(b);\n                indegree[b as usize] += 1;\n            }\n\n            let mut queue = VecDeque::new();\n            for i in 1..=k {\n                if indegree[i as usize] == 0 {\n                    queue.push_back(i);\n                }\n            }\n\n            let mut result = vec![];\n            while let Some(node) = queue.pop_front() {\n                result.push(node);\n                if let Some(neighbors) = graph.get(&node) {\n                    for &neighbor in neighbors {\n                        indegree[neighbor as usize] -= 1;\n                        if indegree[neighbor as usize] == 0 {\n                            queue.push_back(neighbor);\n                        }\n                    }\n                }\n            }\n\n            if result.len() == k as usize {\n                Some(result)\n            } else {\n                None\n            }\n        }\n\n        let row = topological_sort(k, row_conditions);\n        let col = topological_sort(k, col_conditions);\n        \n        if row.is_none() || col.is_none() {\n            return vec![];\n        }\n\n        let row = row.unwrap();\n        let col = col.unwrap();\n        \n        let mut ans = vec![vec![0; k as usize]; k as usize];\n        let mut col_position = vec![0; (k + 1) as usize];\n        \n        for (i, &v) in col.iter().enumerate() {\n            col_position[v as usize] = i;\n        }\n        \n        for (i, &v) in row.iter().enumerate() {\n            ans[i][col_position[v as usize]] = v;\n        }\n\n        ans\n    }\n}\n","compare_result":null,"title_slug":"build-a-matrix-with-conditions","has_notes":false,"flag_type":1}