{"id":1332346722,"question_id":1544,"lang":"rust","lang_name":"Rust","time":"1 day, 23 hours","timestamp":1721858411,"status":10,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/1332346722/","is_pending":"Not Pending","title":"Count Good Nodes in Binary Tree","memory":"6.4 MB","code":"// Definition for a binary tree node.\n// #[derive(Debug, PartialEq, Eq)]\n// pub struct TreeNode {\n//   pub val: i32,\n//   pub left: Option<Rc<RefCell<TreeNode>>>,\n//   pub right: Option<Rc<RefCell<TreeNode>>>,\n// }\n// \n// impl TreeNode {\n//   #[inline]\n//   pub fn new(val: i32) -> Self {\n//     TreeNode {\n//       val,\n//       left: None,\n//       right: None\n//     }\n//   }\n// }\nuse std::rc::Rc;\nuse std::cell::RefCell;\nimpl Solution {\n    pub fn good_nodes(root: Option<Rc<RefCell<TreeNode>>>) -> i32 {\n        if root.is_none() {\n            return 0\n        }\n        let mut stk = vec![(root.unwrap(), -10001i32)];\n        let mut cnt = 0i32;\n\n        while let Some((node, val)) = stk.pop() {\n            let mut br_node = node.borrow_mut();\n            if br_node.val >= val {\n                cnt += 1;\n            }\n            if let Some(tmp_node) = br_node.left.take() {\n                stk.push((tmp_node, br_node.val.max(val)));\n            }\n            if let Some(tmp_node) = br_node.right.take() {\n                stk.push((tmp_node, br_node.val.max(val)));\n            }\n        }\n\n        cnt        \n    }\n}","compare_result":"111111111111111111111111111111111111111111111111111111111111111","title_slug":"count-good-nodes-in-binary-tree","has_notes":false,"flag_type":1}