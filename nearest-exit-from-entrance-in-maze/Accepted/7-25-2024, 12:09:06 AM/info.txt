{"id":1332350873,"question_id":2038,"lang":"elixir","lang_name":"Elixir","time":"1 day, 23 hours","timestamp":1721858946,"status":10,"status_display":"Accepted","runtime":"1045 ms","url":"/submissions/detail/1332350873/","is_pending":"Not Pending","title":"Nearest Exit from Entrance in Maze","memory":"92.6 MB","code":"defmodule Solution do\n  @spec nearest_exit(maze :: [[char]], entrance :: [integer]) :: integer\n  def nearest_exit(maze, [x, y]) do\n    m = maze |> length()\n    n = maze |> hd() |> length()\n\n    g =\n      maze\n      |> Enum.with_index()\n      |> Enum.reduce(%{}, fn {row, i}, acc ->\n        row\n        |> Enum.with_index()\n        |> Enum.reduce(acc, fn {x, j}, acc ->\n          Map.put(acc, {i, j}, x)\n        end)\n      end)\n\n    bfs(:queue.from_list([{x, y, 0}]), {g, m, n}, MapSet.new(), [x, y])\n  end\n\n  def bfs(q, {g, m, n} = grid, vistied, entrance) do\n    if :queue.is_empty(q) do\n      -1\n    else\n      {x, y, ct} = :queue.head(q)\n      q = :queue.tail(q)\n\n      cond do\n        exit?(grid, x, y) && [x, y] != entrance ->\n          ct\n\n        {x, y} in vistied ->\n          bfs(q, grid, vistied, entrance)\n\n        true ->\n          vistied = MapSet.put(vistied, {x, y})\n\n          [{-1, 0}, {0, 1}, {1, 0}, {0, -1}]\n          |> Enum.reduce(q, fn {dx, dy}, acc ->\n            if valid?(grid, x + dx, y + dy) do\n              :queue.snoc(acc, {x + dx, y + dy, ct + 1})\n            else\n              acc\n            end\n          end)\n          |> bfs(grid, vistied, entrance)\n      end\n    end\n  end\n\n  def exit?({_, m, n}, x, y) do\n    x == 0 || x == m - 1 || y == 0 || y == n - 1\n  end\n\n  def valid?({g, m, n}, x, y) do\n    x >= 0 && x < m && y >= 0 && y < n && g[{x, y}] == ?.\n  end\nend","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"nearest-exit-from-entrance-in-maze","has_notes":false,"flag_type":1}