{"id":1320272183,"question_id":3500,"lang":"python3","lang_name":"Python3","time":"1 week, 5 days","timestamp":1720925978,"status":11,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/1320272183/","is_pending":"Not Pending","title":"Minimum Cost for Cutting Cake II","memory":"N/A","code":"class Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:\n        horizontalCut.sort()\n        verticalCut.sort()\n        \n        # test max gap\n        max_horizontal_gap = self.calculate_max_gap(m, horizontalCut)\n        max_vertical_gap = self.calculate_max_gap(n, verticalCut)\n        \n        # test mod 48\n        MOD = 10**9 + 7\n        total_cost = (max_horizontal_gap * max_vertical_gap) % MOD\n        \n        return total_cost\n    \n    def calculate_max_gap(self, length: int, cuts: List[int]) -> int:\n        max_gap = cuts[0]  \n        for i in range(1, len(cuts)):\n            max_gap = max(max_gap, cuts[i] - cuts[i-1])\n        \n        max_gap = max(max_gap, length - cuts[-1])\n        \n        return max_gap","compare_resulttitle_slug":"minimum-cost-for-cutting-cake-ii","has_notes":false,"flag_type":1}