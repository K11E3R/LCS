{"id":1314466884,"question_id":2139,"lang":"rust","lang_name":"Rust","time":"2 weeks, 3 days","timestamp":1720475913,"status":15,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/1314466884/","is_pending":"Not Pending","title":"Detect Squares","memory":"N/A","code":"use std::collections::HashMap;\n\nstruct DetectSquares {\n    cnt: HashMap<i32, HashMap<i32, i32>>,\n}\n\nimpl DetectSquares {\n    fn new() -> Self {\n        Self {\n            cnt: HashMap::new(),\n        }\n    }\n    \n    fn add(&mut self, point: Vec<i32>) {\n        let x = point[0];\n        let y = point[1];\n        *self.cnt.entry(x).or_insert_with(HashMap::new).entry(y).or_insert(0) += 1;\n    }\n    \n    fn count(&self, point: Vec<i32>) -> i32 {\n        let x1 = point[0];\n        let y1 = point[1];\n        if !self.cnt.contains_key(&x1) {\n            return 0;\n        }\n        let mut ans = 0;\n        \n        for (&x2, cnt2) in &self.cnt {\n            if x2 != x1 {\n                let d = x2 - x1;\n                if let Some(cnt1) = self.cnt.get(&x1) {\n                    if let Some(&cnt_y1_d) = cnt1.get(&(y1 + d)) {\n                        if let Some(&cnt_y2_d) = cnt2.get(&(y1 + d)) {\n                            ans += cnt2[&y1] * cnt_y1_d * cnt_y2_d;\n                        }\n                    }\n                    if let Some(&cnt_y1_d) = cnt1.get(&(y1 - d)) {\n                        if let Some(&cnt_y2_d) = cnt2.get(&(y1 - d)) {\n                            ans += cnt2[&y1] * cnt_y1_d * cnt_y2_d;\n                        }\n                    }\n                }\n            }\n        }\n        \n        ans\n    }\n}\n","compare_result":"111111111111111100000000000000000000000000000000000000","title_slug":"detect-squares","has_notes":false,"flag_type":1}